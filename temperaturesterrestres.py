# Importer les biblioth√®ques n√©cessaires
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import os
from sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import PolynomialFeatures
from sklearn.ensemble import GradientBoostingRegressor


# Configuration de la page
st.set_page_config(
    page_title="Analyse de Temp√©rature",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded",
)

# D√©finition des chemins pour les fichiers de donn√©es
data_path = "Data/"
files = {
    "df1": "Zonal annual means.csv",
    "df2": "Southern Hemisphere-mean monthly, seasonal, and annual means.csv",
    "df3": "Northern Hemisphere-mean monthly, seasonal, and annual means.csv",
    "df4": "Global-mean monthly, seasonal, and annual means.csv",
    "df5": "owid-co2-data.csv",
    "df_pib": "global-gdp-over-the-long-run.csv",
    "df_pop": "demo-pop-monde.xlsx"
}

# Chargement des fichiers dans des DataFrames
dataframes = {}
for key, file in files.items():
    file_path = os.path.join(data_path, file)
    if key == "df2" or key == "df3" or key == "df4":
        dataframes[key] = pd.read_csv(file_path, header=1)
    elif key == "df5":
        dataframes[key] = pd.read_csv(file_path, sep=",")
    elif file.endswith('.csv'):
        dataframes[key] = pd.read_csv(file_path)
    elif file.endswith('.xlsx'):
        dataframes[key] = pd.read_excel(file_path)

# Code pour le volet de navigation lat√©ral
st.sidebar.title("Navigation")
page = st.sidebar.selectbox("Choisissez une section", [
                            "Accueil", "Exploration des Donn√©es", "Visualisations", "Mod√®les et Pr√©dictions"])

# Chemin relatif vers l'image dans le dossier "images"
image_path = os.path.join("images", "imagecouv.png")

# V√©rification si l'image existe, puis affichage dans la barre lat√©rale
if os.path.exists(image_path):
    st.sidebar.image(image_path, use_column_width=True)
else:
    st.sidebar.error(
        "L'image de couverture est introuvable. Assurez-vous qu'elle est dans le dossier 'images'.")

# Affichage du titre et des noms dans la barre lat√©rale
st.sidebar.markdown(
    """
    <div style="text-align: center;">
        <h2 style="color: #FFFFFF;">Analyse des Temp√©ratures Terrestres</h2>
        <p style="color: #FFFFFF; font-size: 16px;">
            - Jacques Gauthier<br>
            - Thibault Le Boudec
        </p>
    </div>
    """,
    unsafe_allow_html=True
)
#############################################################################
# Page Accueil
if page == "Accueil":
    st.markdown(
        """
        <h2 style="color: #FFFFFF;">La Hausse des Temp√©ratures Terrestres : Une Crise Mondiale</h2>
        <p style="color: #FFFFFF; font-size: 18px;">
        Le climat terrestre, marqu√© par des cycles naturels de variation, conna√Æt depuis la fin du XIXe si√®cle une hausse rapide des temp√©ratures, sans pr√©c√©dent dans l‚Äôhistoire humaine r√©cente. Ce ph√©nom√®ne, souvent appel√© "r√©chauffement climatique", est fortement li√© √† l'industrialisation qui a d√©marr√© il y a plus de 150 ans. √Ä mesure que les activit√©s humaines se sont intensifi√©es ‚Äî extraction et combustion de combustibles fossiles, d√©forestation, industrialisation accrue ‚Äî la quantit√© de dioxyde de carbone (CO‚ÇÇ), de m√©thane (CH‚ÇÑ) et d'autres gaz √† effet de serre (GES) dans l'atmosph√®re a consid√©rablement augment√©. Ces gaz pi√®gent la chaleur, perturbant l‚Äô√©quilibre naturel du climat et entra√Ænant une hausse des temp√©ratures moyennes √† l'√©chelle mondiale.
        </p>

        <h2 style="color: #FFFFFF;">L'Histoire et les Grandes √âtapes de la Prise de Conscience Climatique</h2>
        <p style="color: #FFFFFF; font-size: 18px;">
        La prise de conscience mondiale de cette crise n'est pas imm√©diate. D√®s les ann√©es 1970, les scientifiques alertent sur les effets potentiels des gaz √† effet de serre, mais il faudra attendre les ann√©es 1990 pour que la question environnementale et climatique gagne en visibilit√© politique et m√©diatique. La premi√®re "Conf√©rence des Parties" (COP), un rassemblement annuel de pays signataires de la Convention-cadre des Nations Unies sur les changements climatiques (CCNUCC), a eu lieu en 1995. Ce cadre marque le d√©but d'un dialogue mondial structur√© visant √† d√©finir des engagements collectifs pour r√©duire les √©missions de gaz √† effet de serre.
        </p>
        <p style="color: #FFFFFF; font-size: 18px;">
        Au fil des COP, plusieurs accords majeurs ont √©t√© conclus :
        </p>
        <ul style="color: #FFFFFF; font-size: 18px;">
            <li><strong>Protocole de Kyoto (1997)</strong> : Premier accord juridiquement contraignant, il impose des objectifs de r√©duction des √©missions aux pays industrialis√©s.</li>
            <li><strong>Accord de Copenhague (2009)</strong> : Bien qu'il n'ait pas abouti √† des engagements contraignants, cet accord reconna√Æt officiellement le besoin de limiter le r√©chauffement √† 2¬∞C.</li>
            <li><strong>Accord de Paris (2015)</strong> : Cet accord historique vise √† contenir l‚Äô√©l√©vation des temp√©ratures bien en dessous de 2¬∞C, avec un objectif id√©al de 1,5¬∞C par rapport aux niveaux pr√©industriels. Il engage tous les pays √† des contributions volontaires et revues p√©riodiquement.</li>
        </ul>
        <p style="color: #FFFFFF; font-size: 18px;">
        Ces accords, bien qu‚Äôimportants, posent des d√©fis en termes de mise en ≈ìuvre et de suivi. Chaque COP est une occasion de r√©√©valuer les engagements, d'ajuster les strat√©gies et d'inciter √† des efforts accrus face aux impacts du r√©chauffement climatique.
        </p>

        <h2 style="color: #FFFFFF;">Notre Projet : Visualiser et Comprendre les Donn√©es Climatiques</h2>
        <p style="color: #FFFFFF; font-size: 18px;">
        √Ä l'heure o√π la sensibilisation et la compr√©hension des enjeux climatiques deviennent essentielles, nous avons d√©velopp√© ce projet dans le but de rendre accessibles les donn√©es sur l'√©volution des temp√©ratures et les facteurs associ√©s. Ce projet permet de suivre les tendances historiques des temp√©ratures mondiales et de les relier √† des facteurs explicatifs tels que les √©missions de CO‚ÇÇ, la croissance d√©mographique, et le PIB mondial. L‚Äôobjectif est de fournir un outil qui aide √† mieux comprendre l‚Äôimpact de l‚Äôactivit√© humaine sur le climat et, esp√©rons-le, √† renforcer l'engagement pour un avenir durable.
        </p>
        <p style="color: #FFFFFF; font-size: 18px;">
        Ce projet pr√©sente plusieurs visualisations interactives qui permettent d'explorer ces donn√©es et d'observer les corr√©lations entre les variables. Notre espoir est qu'en rendant ces donn√©es compr√©hensibles et accessibles, nous pourrons encourager une prise de conscience plus large et informer les discussions autour des actions √† entreprendre pour att√©nuer les effets du r√©chauffement climatique.
        </p>

        <h2 style="color: #FFFFFF;">Conscience des Limites et Perspectives d'Am√©lioration</h2>
        <p style="color: #FFFFFF; font-size: 18px;">
        Bien que nous ayons utilis√© les meilleures donn√©es disponibles, nous reconnaissons les limites de notre projet. Nos analyses se basent sur des donn√©es globales et historiques, et bien que les tendances soient claires, elles ne permettent pas de faire des pr√©dictions pr√©cises sur des √©chelles plus locales ou √† court terme. De plus, le r√©chauffement climatique est un ph√©nom√®ne complexe influenc√© par de nombreux facteurs qui ne sont pas tous couverts dans cette √©tude. Ce projet constitue n√©anmoins une premi√®re √©tape vers une meilleure compr√©hension des tendances globales et pourrait √™tre √©tendu avec de nouvelles donn√©es et m√©thodes d‚Äôanalyse plus avanc√©es.
        </p>
        """,
        unsafe_allow_html=True
    )

    # Bouton vers le site du GIEC
    if st.button("Visiter le site du GIEC"):
        st.write("[Site officiel du GIEC](https://www.ipcc.ch)")


############################################################################
# Page Exploration des Donn√©es
elif page == "Exploration des Donn√©es":
    st.markdown("### Exploration des Donn√©es")

    source = st.radio(
        "S√©lectionnez une source de donn√©es",
        ["Source NASA", "Source OWID", "Source Banque Mondiale"],
        index=0
    )

    if source == "Source NASA":
        selected_dfs = ["df1", "df2", "df3", "df4"]
    elif source == "Source OWID":
        selected_dfs = ["df5"]
    elif source == "Source Banque Mondiale":
        selected_dfs = ["df_pib", "df_pop"]

    action = st.radio(
        "Affichage des donn√©es",
        ["Aper√ßu des 10 premi√®res lignes", "Types de donn√©es", "Description des donn√©es",
            "Nombre de lignes et de colonnes", "Donn√©es manquantes ou erron√©es"],
        index=0
    )

    for key in selected_dfs:
        if action == "Aper√ßu des 10 premi√®res lignes":
            st.write(dataframes[key].head(10))
        elif action == "Types de donn√©es":
            st.write(dataframes[key].dtypes)
        elif action == "Description des donn√©es":
            st.write(dataframes[key].describe())
        elif action == "Nombre de lignes et de colonnes":
            st.write(dataframes[key].shape)
        elif action == "Donn√©es manquantes ou erron√©es":
            st.write(dataframes[key].isnull().sum())

##########################################################################
# Chemin relatif vers le fichier de donn√©es
final_data_path = os.path.join("Data", "final_data.csv")

# Page Visualisations
if page == "Accueil":
    pass  # Placeholder to ensure structural integrity
elif page == "Visualisations":
    # Charger le fichier final_data.csv
    try:
        final_data = pd.read_csv(final_data_path)

        # Titre de la section
        st.markdown("## Visualisations")
        st.markdown(
            """
            Cette section pr√©sente des graphiques illustrant les tendances historiques des temp√©ratures, 
            les relations entre la population et les √©missions de CO‚ÇÇ, et le lien entre la croissance √©conomique 
            et les √©missions de gaz √† effet de serre. Ces visualisations permettent de mieux comprendre les 
            dynamiques mondiales li√©es au r√©chauffement climatique.
            """
        )

        # √âvolution des temp√©ratures globales, h√©misph√®re nord et sud (1880-2022)
        st.markdown(
            "### √âvolution des Temp√©ratures Globales, H√©misph√®re Nord et Sud (1880-2022)")

        fig_temp = go.Figure()
        fig_temp.add_trace(go.Scatter(
            x=final_data['Year'], y=final_data['Glob'], mode='lines', name='Global', line=dict(color="red")))
        fig_temp.add_trace(go.Scatter(
            x=final_data['Year'], y=final_data['NHem'], mode='lines', name='Northern Hemisphere', line=dict(color="blue")))
        fig_temp.add_trace(go.Scatter(x=final_data['Year'], y=final_data['SHem'],
                           mode='lines', name='Southern Hemisphere', line=dict(color="green")))
        fig_temp.update_layout(
            title='√âvolution des temp√©ratures globales, h√©misph√®re nord et sud (1880-2022)',
            xaxis_title='Ann√©e',
            yaxis_title='Temp√©rature (¬∞C)',
        )
        st.plotly_chart(fig_temp, use_container_width=True)

        # Bouton pour afficher les commentaires
        if st.checkbox("Je veux en savoir plus sur ce graphe", key="temp"):
            st.markdown(
                """
                **Analyse :**
                Ce graphique montre l‚Äô√©volution des temp√©ratures moyennes √† l'√©chelle globale et dans les h√©misph√®res nord et sud depuis 1880. 
                Les tendances sont particuli√®rement frappantes apr√®s les ann√©es 1970, avec une mont√©e rapide des temp√©ratures globales. 
                On observe une √©l√©vation plus prononc√©e dans l‚Äôh√©misph√®re nord (en bleu) par rapport √† l'h√©misph√®re sud (en vert), 
                probablement en raison d'une plus grande densit√© de terres habit√©es et industrialis√©es dans le nord, ce qui augmente 
                l‚Äôeffet des activit√©s humaines sur le climat. La tendance g√©n√©rale √† la hausse confirme les impacts du r√©chauffement climatique.
                """
            )

        # Relation entre la population mondiale et les √©missions de CO‚ÇÇ (1880-2022)
        st.markdown(
            "### Relation entre la Population Mondiale et les √âmissions de CO‚ÇÇ (1880-2022)")

        fig_pop_co2 = go.Figure()

        # Ajout des deux courbes Population et CO‚ÇÇ avec l'axe des ann√©es en abscisse
        fig_pop_co2.add_trace(go.Scatter(
            x=final_data['Year'],
            y=final_data['Population (millions)'],
            mode='lines',
            name="Population (millions)",
            line=dict(color="purple")
        ))
        fig_pop_co2.add_trace(go.Scatter(
            x=final_data['Year'],
            y=final_data['CO2 (kt)'],
            mode='lines',
            name="√âmissions de CO‚ÇÇ (kt)",
            line=dict(color="orange"),
            yaxis="y2"  # Utilisation d'un deuxi√®me axe pour CO‚ÇÇ
        ))

    # Mise en forme des axes
        fig_pop_co2.update_layout(
            title='Relation entre la Population Mondiale et les √âmissions de CO‚ÇÇ (1880-2022)',
            xaxis=dict(title='Ann√©e'),
            yaxis=dict(title='Population (millions)',
                       titlefont=dict(color='purple')),
            yaxis2=dict(title='√âmissions de CO‚ÇÇ (kt)', titlefont=dict(
                color='orange'), overlaying='y', side='right')
        )
        st.plotly_chart(fig_pop_co2, use_container_width=True)

        # Bouton pour afficher les commentaires
        if st.checkbox("Je veux en savoir plus sur ce graphe", key="pop_co2"):
            st.markdown(
                """
                **Analyse :**
                Ce graphique illustre une relation positive entre la croissance de la population mondiale et les √©missions de CO‚ÇÇ. 
                √Ä mesure que la population augmente, les √©missions de CO‚ÇÇ suivent √©galement une trajectoire ascendante, 
                ce qui sugg√®re que l‚Äôaugmentation de la population mondiale est un facteur cl√© dans la hausse des √©missions. 
                Cela est li√© √† une plus forte demande en √©nergie, en transport et en infrastructures, qui sont souvent associ√©es 
                √† une augmentation des combustibles fossiles et, par cons√©quent, des √©missions de CO‚ÇÇ.
                """
            )

        # √âvolution du PIB mondial et des √©missions de CO‚ÇÇ (1880-2022)
        st.markdown(
            "### √âvolution du PIB Mondial et des √âmissions de CO‚ÇÇ (1880-2022)")

        fig_pib_co2 = go.Figure()
        fig_pib_co2.add_trace(go.Scatter(
            x=final_data['Year'], y=final_data['GDP (billions)'], mode='lines', name='PIB', line=dict(color="green"), yaxis="y1"))
        fig_pib_co2.add_trace(go.Scatter(
            x=final_data['Year'], y=final_data['CO2 (kt)'], mode='lines', name='CO‚ÇÇ', line=dict(color="red"), yaxis="y2"))
        fig_pib_co2.update_layout(
            title="√âvolution du PIB mondial et des √©missions de CO‚ÇÇ (1880-2022)",
            xaxis=dict(title='Ann√©e'),
            yaxis=dict(title='PIB (milliards)', titlefont=dict(
                color="green"), tickfont=dict(color="green")),
            yaxis2=dict(title='√âmissions de CO‚ÇÇ (kt)', titlefont=dict(
                color="red"), tickfont=dict(color="red"), overlaying='y', side='right')
        )
        st.plotly_chart(fig_pib_co2, use_container_width=True)

        # Bouton pour afficher les commentaires
        if st.checkbox("Je veux en savoir plus sur ce graphe", key="pib_co2"):
            st.markdown(
                """
                **Analyse :**
                Ce graphique montre l'√©volution parall√®le du PIB mondial (en vert) et des √©missions de CO‚ÇÇ (en rouge). 
                √Ä mesure que le PIB augmente, les √©missions de CO‚ÇÇ augmentent √©galement, ce qui indique un lien 
                entre la croissance √©conomique et l‚Äôintensification de la pollution carbone. Les hausses conjointes 
                dans les deux courbes soulignent les d√©fis que pose la croissance √©conomique pour la durabilit√© environnementale, 
                et la n√©cessit√© de trouver des moyens d‚Äôaugmenter le PIB sans accro√Ætre les √©missions de CO‚ÇÇ.
                """
            )

        # Matrice de corr√©lation entre les variables
        st.markdown("### Matrice de Corr√©lation entre les Variables")

        corr_matrix = final_data.corr()
        fig_corr, ax = plt.subplots(figsize=(10, 6))
        sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", ax=ax)
        ax.set_title("Matrice de corr√©lation entre les variables")
        st.pyplot(fig_corr)

        # Bouton pour afficher les commentaires
        if st.checkbox("Je veux en savoir plus sur ce graphe", key="corr"):
            st.markdown(
                """
                **Analyse approfondie de la matrice de corr√©lation :**

                Cette matrice de corr√©lation pr√©sente les relations lin√©aires entre diff√©rentes variables importantes pour l'√©tude du changement climatique, notamment les temp√©ratures, les √©missions de CO‚ÇÇ, la population mondiale, et le PIB. Les valeurs de corr√©lation varient de -1 (corr√©lation n√©gative parfaite) √† 1 (corr√©lation positive parfaite). Voici une analyse des corr√©lations cl√©s observ√©es :

                - **Temp√©ratures globales (Glob) et h√©misph√®res (NHem, SHem) :** La temp√©rature globale pr√©sente une corr√©lation tr√®s forte avec les temp√©ratures de l'h√©misph√®re nord (0.98) et de l'h√©misph√®re sud (0.97). Cela montre que les augmentations de temp√©rature sont globales, affectant les deux h√©misph√®res de mani√®re similaire, m√™me si l'h√©misph√®re nord est l√©g√®rement plus affect√©, ce qui est souvent li√© √† une concentration plus √©lev√©e de population et d'activit√©s industrielles.

                - **Population mondiale et √©missions de CO‚ÇÇ :** La population mondiale est fortement corr√©l√©e avec les √©missions de CO‚ÇÇ (0.94), indiquant que l'augmentation de la population contribue √† l'augmentation des √©missions. Avec une population croissante, la demande en √©nergie, transport, et ressources naturelles augmente, entra√Ænant des √©missions de CO‚ÇÇ accrues.

                - **PIB (GDP) et √©missions de CO‚ÇÇ :** La corr√©lation entre le PIB et les √©missions de CO‚ÇÇ est √©galement √©lev√©e (0.96). Cela souligne l'interconnexion entre la croissance √©conomique et l'augmentation des √©missions de gaz √† effet de serre. En effet, de nombreuses √©conomies sont encore d√©pendantes des combustibles fossiles, ce qui explique pourquoi une croissance du PIB entra√Æne g√©n√©ralement une hausse des √©missions.

                - **Population et PIB :** La corr√©lation entre la population et le PIB (0.97) montre que les deux augmentent souvent conjointement. Une population plus importante peut favoriser la croissance √©conomique en augmentant la main-d'≈ìuvre et la consommation. Cependant, cette corr√©lation peut aussi indiquer que la croissance √©conomique et l'industrialisation accompagnent l'augmentation de la population dans de nombreux pays.

                - **Ann√©e et variables climatiques :** Les fortes corr√©lations entre l'ann√©e et les autres variables, notamment les √©missions de CO‚ÇÇ (0.95) et la population (0.94), montrent que ces facteurs ont tous suivi une tendance √† la hausse au fil des d√©cennies. Cela est conforme √† la tendance historique d'industrialisation et de croissance d√©mographique depuis le d√©but du 20e si√®cle.

                Cette matrice met en √©vidence les interconnexions entre la croissance d√©mographique, le d√©veloppement √©conomique, et les √©missions de gaz √† effet de serre. Les corr√©lations fortes observ√©es ici soulignent l'importance de prendre en compte plusieurs facteurs (population, PIB, √©missions) dans les politiques de lutte contre le r√©chauffement climatique. Cela sugg√®re aussi que r√©duire les √©missions de CO‚ÇÇ tout en maintenant une croissance √©conomique sera un d√©fi majeur pour les ann√©es √† venir.
                """
            )

    except FileNotFoundError:
        st.error(
            "Le fichier final_data.csv est introuvable. V√©rifiez le chemin et r√©essayez.")

##########################################################################
# Page Mod√®les et Pr√©dictions
elif page == "Mod√®les et Pr√©dictions":
    # Chargement des donn√©es pour la mod√©lisation
    try:
        final_data_path = "Data/final_data.csv"
        final_data = pd.read_csv(final_data_path)
        st.write("Jeu de donn√©es final charg√© avec succ√®s.")
        
        # Calcul des taux de croissance annuels historiques pour d√©finir les valeurs par d√©faut des curseurs
        gdp_growth_rate_default = final_data['GDP (billions)'].pct_change().mean() * 100
        population_growth_rate_default = final_data['Population (millions)'].pct_change().mean() * 100
        co2_growth_rate_default = final_data['CO2 (kt)'].pct_change().mean() * 100
    
    except FileNotFoundError:
        st.error("Le fichier final_data.csv est introuvable. V√©rifiez le chemin et r√©essayez.")
    
    # Entra√Ænement du mod√®le de r√©gression lin√©aire final
    X = final_data[['Population (millions)', 'CO2 (kt)', 'GDP (billions)']]
    y = final_data['Glob']
    model_final = LinearRegression()
    model_final.fit(X, y)

    # Section 1 : Choix du mod√®le pr√©dictif
    st.markdown("### Choix du mod√®le pr√©dictif")
    models = [
        ("R√©gression Lin√©aire", LinearRegression(), ["CO2 (kt)"]),
        ("R√©gression Lin√©aire", LinearRegression(), ["CO2 (kt)", "GDP (billions)"]),
        ("R√©gression Lin√©aire", LinearRegression(), ["CO2 (kt)", "GDP (billions)", "Population (millions)"]),
        ("R√©gression Lasso", Lasso(alpha=0.1), ["CO2 (kt)"]),
        ("R√©gression Lasso", Lasso(alpha=0.1), ["CO2 (kt)", "GDP (billions)"]),
        ("R√©gression Lasso", Lasso(alpha=0.1), ["CO2 (kt)", "GDP (billions)", "Population (millions)"]),
        ("R√©gression Ridge", Ridge(alpha=1.0), ["CO2 (kt)"]),
        ("R√©gression Ridge", Ridge(alpha=1.0), ["CO2 (kt)", "GDP (billions)"]),
        ("R√©gression Ridge", Ridge(alpha=1.0), ["CO2 (kt)", "GDP (billions)", "Population (millions)"]),
        ("For√™t Al√©atoire", RandomForestRegressor(n_estimators=100, random_state=42), ["CO2 (kt)"]),
        ("For√™t Al√©atoire", RandomForestRegressor(n_estimators=100, random_state=42), ["CO2 (kt)", "GDP (billions)"]),
        ("For√™t Al√©atoire", RandomForestRegressor(n_estimators=100, random_state=42), ["CO2 (kt)", "GDP (billions)", "Population (millions)"]),
        ("Gradient Boosting", GradientBoostingRegressor(n_estimators=100, random_state=42), ["CO2 (kt)"]),
        ("Gradient Boosting", GradientBoostingRegressor(n_estimators=100, random_state=42), ["CO2 (kt)", "GDP (billions)"]),
        ("Gradient Boosting", GradientBoostingRegressor(n_estimators=100, random_state=42), ["CO2 (kt)", "GDP (billions)", "Population (millions)"]),
        ("R√©seau de Neurones", MLPRegressor(hidden_layer_sizes=(100,), max_iter=1000, random_state=42), ["CO2 (kt)"]),
        ("R√©seau de Neurones", MLPRegressor(hidden_layer_sizes=(100,), max_iter=1000, random_state=42), ["CO2 (kt)", "GDP (billions)"]),
        ("R√©seau de Neurones", MLPRegressor(hidden_layer_sizes=(100,), max_iter=1000, random_state=42), ["CO2 (kt)", "GDP (billions)", "Population (millions)"])
    ]

    results = []

    for model_name, model, features in models:
        X = final_data[features]
        y = final_data['Glob']
        
        model.fit(X, y)
        
        y_pred = model.predict(X)
        mse = mean_squared_error(y, y_pred)
        r2 = r2_score(y, y_pred)
        
        results.append({
            "Mod√®le": model_name,
            "Variables explicatives": " - ".join(features),
            "R¬≤": f"{r2:.4f}",
            "MSE": f"{mse:.4f}"
        })

    results_df = pd.DataFrame(results)

    def highlight_row(row):
        color = 'background-color: green; color: white;' if row.name == 2 else ''
        return [color] * len(row)

    styled_df = results_df.style.apply(highlight_row, axis=1)

    col1, col2 = st.columns([3, 2])
    with col1:
        st.markdown("### Tableau de synth√®se des m√©triques des mod√®les")
        st.dataframe(styled_df)
    with col2:
        st.markdown("""
        ### Pourquoi avoir choisi la r√©gression lin√©aire ?
        1. **Simplicit√© et interpr√©tabilit√©** : les coefficients associ√©s √† chaque variable explicative permettent de comprendre clairement l'impact de chaque variable sur la temp√©rature globale.
        2. **Bonne performance sur les donn√©es** : le R¬≤ de 0.9003 est satisfaisant pour une analyse pr√©dictive.
        3. **Robustesse et g√©n√©ralisation** : contrairement √† certains mod√®les non lin√©aires qui peuvent surajuster, la r√©gression lin√©aire reste simple et robuste.
        """)

    # D√©finition des fonctions pour chaque sc√©nario du GIEC
    def scenario_curve(coeffs, x):
        return coeffs[0] * x**2 + coeffs[1] * x + coeffs[2]

    coeffs_ssp1_1_9 = np.polyfit([2020, 2050, 2100], [1.1, 1.3, 1.4], 2)
    coeffs_ssp1_2_6 = np.polyfit([2020, 2050, 2100], [1.1, 1.4, 1.8], 2)
    coeffs_ssp2_4_5 = np.polyfit([2020, 2050, 2100], [1.1, 1.8, 2.7], 2)
    coeffs_ssp3_7_0 = np.polyfit([2020, 2050, 2100], [1.1, 2.2, 3.6], 2)
    coeffs_ssp5_8_5 = np.polyfit([2020, 2050, 2100], [1.1, 2.4, 4.4], 2)

    scenario_functions = {
        "SSP1-1.9": lambda x: scenario_curve(coeffs_ssp1_1_9, x),
        "SSP1-2.6": lambda x: scenario_curve(coeffs_ssp1_2_6, x),
        "SSP2-4.5": lambda x: scenario_curve(coeffs_ssp2_4_5, x),
        "SSP3-7.0": lambda x: scenario_curve(coeffs_ssp3_7_0, x),
        "SSP5-8.5": lambda x: scenario_curve(coeffs_ssp5_8_5, x)
    }

    # Section 2 : Pr√©dictions
    st.markdown("### Pr√©dictions")

    # Boutons pour les options de r√©initialisation et de corr√©lation
    col1, col2 = st.columns(2)
    with col1:
        reset_to_historical = st.button("Taux historiques")
    with col2:
        correlate_variables = st.checkbox("Corr√©ler les taux")

    # R√©initialisation des valeurs des curseurs aux valeurs par d√©faut si le bouton est cliqu√©
    if reset_to_historical:
        gdp_growth_adjustment = gdp_growth_rate_default
        population_growth_adjustment = population_growth_rate_default
        co2_growth_adjustment = co2_growth_rate_default
    else:
        # Calcul des ratios de proportionnalit√©
        population_ratio = population_growth_rate_default / gdp_growth_rate_default
        co2_ratio = co2_growth_rate_default / gdp_growth_rate_default

        if correlate_variables:
            # Curseur principal pour ajuster le taux de croissance du PIB
            gdp_growth_adjustment = st.slider("Taux de croissance PIB (%)", -5.0, 5.0, gdp_growth_rate_default)

            # Calcul proportionnel pour les autres taux en gardant les ratios constants
            population_growth_adjustment = gdp_growth_adjustment * population_ratio
            co2_growth_adjustment = gdp_growth_adjustment * co2_ratio

            # Affichage des curseurs d√©sactiv√©s avec les valeurs calcul√©es
            st.slider("Taux de croissance Population (%) (corr√©l√©)", -5.0, 5.0, population_growth_adjustment, disabled=True)
            st.slider("Taux de croissance CO‚ÇÇ (%) (corr√©l√©)", -5.0, 5.0, co2_growth_adjustment, disabled=True)
        else:
            # Curseurs ind√©pendants pour chaque taux de croissance
            gdp_growth_adjustment = st.slider("Taux de croissance PIB (%)", -5.0, 5.0, gdp_growth_rate_default)
            population_growth_adjustment = st.slider("Taux de croissance Population (%)", -5.0, 5.0, population_growth_rate_default)
            co2_growth_adjustment = st.slider("Taux de croissance CO‚ÇÇ (%)", -5.0, 5.0, co2_growth_rate_default)

    # Calcul des projections des variables explicatives jusqu'en 2100 avec les taux ajust√©s
    years_projection = np.arange(2023, 2101)
    gdp_2022 = final_data['GDP (billions)'].values[-1]
    population_2022 = final_data['Population (millions)'].values[-1]
    co2_2022 = final_data['CO2 (kt)'].values[-1]

    gdp_projection = [gdp_2022 * ((1 + gdp_growth_adjustment / 100) ** (year - 2022)) for year in years_projection]
    population_projection = [population_2022 * ((1 + population_growth_adjustment / 100) ** (year - 2022)) for year in years_projection]
    co2_projection = [co2_2022 * ((1 + co2_growth_adjustment / 100) ** (year - 2022)) for year in years_projection]

    projection_df = pd.DataFrame({
        "Year": years_projection,
        "GDP (billions)": gdp_projection,
        "Population (millions)": population_projection,
        "CO2 (kt)": co2_projection
    })

    # Pr√©dictions de temp√©rature bas√©es sur les projections
    X_projection = projection_df[['Population (millions)', 'CO2 (kt)', 'GDP (billions)']]
    temperature_predictions = model_final.predict(X_projection)
    projection_df['Predicted Temperature'] = temperature_predictions

    # Calcul de l'intervalle de confiance (exemple ¬±0.5¬∞C autour de la projection)
    confidence_interval = 0.5
    projection_df['Upper Bound'] = projection_df['Predicted Temperature'] + confidence_interval
    projection_df['Lower Bound'] = projection_df['Predicted Temperature'] - confidence_interval

    # Affichage du graphique des pr√©dictions de temp√©rature avec option d'inclusion des sc√©narios du GIEC
    show_giec_scenarios = st.checkbox("Afficher les sc√©narios du GIEC")
    fig_temperature = go.Figure()

    fig_temperature.add_trace(go.Scatter(
        x=final_data['Year'], y=final_data['Glob'], mode='lines',
        name='Temp√©ratures Observ√©es (1880-2022)', line=dict(color='blue')
    ))
    fig_temperature.add_trace(go.Scatter(
        x=projection_df['Year'], y=projection_df['Predicted Temperature'], mode='lines',
        name='Temp√©ratures Pr√©dites (2023-2100)', line=dict(color='red', width=3)
    ))

    if not show_giec_scenarios:
        fig_temperature.add_trace(go.Scatter(
            x=np.concatenate([projection_df['Year'], projection_df['Year'][::-1]]),
            y=np.concatenate([projection_df['Upper Bound'], projection_df['Lower Bound'][::-1]]),
            fill='toself', fillcolor='rgba(255, 0, 0, 0.2)',
            line=dict(color='rgba(255, 255, 255, 0)'),
            showlegend=True, name='Intervalle de Confiance (¬±0.5¬∞C)'
        ))

    if show_giec_scenarios:
        ssp_scenarios = {
            "SSP1-1.9": [scenario_functions["SSP1-1.9"](year) for year in years_projection],
            "SSP1-2.6": [scenario_functions["SSP1-2.6"](year) for year in years_projection],
            "SSP2-4.5": [scenario_functions["SSP2-4.5"](year) for year in years_projection],
            "SSP3-7.0": [scenario_functions["SSP3-7.0"](year) for year in years_projection],
            "SSP5-8.5": [scenario_functions["SSP5-8.5"](year) for year in years_projection]
        }
        colors = {"SSP1-1.9": "deepskyblue", "SSP1-2.6": "blue", "SSP2-4.5": "orange", "SSP3-7.0": "red", "SSP5-8.5": "darkred"}
        for scenario, values in ssp_scenarios.items():
            fig_temperature.add_trace(go.Scatter(
                x=years_projection, y=values, mode='lines',
                name=scenario, line=dict(color=colors[scenario], dash="dash")
            ))

    fig_temperature.update_layout(
        title='Pr√©dictions de la Temp√©rature Globale (2023-2100)',
        xaxis_title='Ann√©e',
        yaxis_title='Temp√©rature Globale (¬∞C)',
        legend=dict(
            orientation="h",
            yanchor="top",
            y=-0.3,
            xanchor="center",
            x=0.5,
            itemwidth=50,
            traceorder="normal"
        ),
        width=700,
        height=500
    )

    # Graphique pour les projections des variables explicatives
    fig_projection = go.Figure()

    fig_projection.add_trace(go.Scatter(
        x=projection_df["Year"], y=projection_df["GDP (billions)"],
        mode='lines', name='PIB (milliards)', line=dict(color='blue'), yaxis='y1'
    ))
    fig_projection.add_trace(go.Scatter(
        x=projection_df["Year"], y=projection_df["Population (millions)"],
        mode='lines', name='Population (millions)', line=dict(color='green'), yaxis='y2'
    ))
    fig_projection.add_trace(go.Scatter(
        x=projection_df["Year"], y=projection_df["CO2 (kt)"],
        mode='lines', name='CO‚ÇÇ (kt)', line=dict(color='red'), yaxis='y3'
    ))

    fig_projection.update_layout(
        title="Projection des Variables Explicatives jusqu'en 2100",
        xaxis=dict(title='Ann√©e'),
        yaxis=dict(title='PIB (milliards)', titlefont=dict(color='blue'), tickfont=dict(color='blue')),
        yaxis2=dict(title='Population (millions)', titlefont=dict(color='green'), tickfont=dict(color='green'),
                    overlaying='y', side='right'),
        yaxis3=dict(title='CO‚ÇÇ (kt)', titlefont=dict(color='red'), tickfont=dict(color='red'),
                    anchor='free', overlaying='y', side='right', position=0.85),
        legend=dict(orientation="h", yanchor="bottom", y=-0.3, xanchor="center", x=0.5),
        width=700, height=500
    )

    # Affichage des graphiques dans Streamlit
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig_projection, use_container_width=True)
    with col2:
        st.plotly_chart(fig_temperature, use_container_width=True)
        
    # Valeurs cibles des variables pour chaque sc√©nario en 2100
    target_values_2100 = {
        "SSP1-1.9": {"GDP (billions)": 90000, "Population (millions)": 10000, "CO2 (kt)": 10000},
        "SSP1-2.6": {"GDP (billions)": 95000, "Population (millions)": 10500, "CO2 (kt)": 20000},
        "SSP2-4.5": {"GDP (billions)": 100000, "Population (millions)": 11000, "CO2 (kt)": 30000},
        "SSP3-7.0": {"GDP (billions)": 105000, "Population (millions)": 11500, "CO2 (kt)": 40000},
        "SSP5-8.5": {"GDP (billions)": 110000, "Population (millions)": 12000, "CO2 (kt)": 50000},
    }

    # Initial values for the variables
    initial_values = {
        "GDP (billions)": gdp_2022,
        "Population (millions)": population_2022,
        "CO2 (kt)": co2_2022
    }

    # Calculation of theoretical growth rates
    growth_rates = []
    for scenario, targets in target_values_2100.items():
        scenario_growth = {"Sc√©nario": scenario}
        for variable, target_value in targets.items():
            initial_value = initial_values[variable]
            years = 2100 - 2022
            growth_rate = ((target_value / initial_value) ** (1 / years) - 1) * 100
            scenario_growth[variable] = f"{growth_rate:.2f}%"
        
        growth_rates.append(scenario_growth)

    # Create DataFrame for display
    growth_df = pd.DataFrame(growth_rates)

    # Display the growth rates table at the bottom of the "Mod√®les et Pr√©dictions" page
    st.markdown("### Taux de Croissance Th√©oriques pour Atteindre les Valeurs des Sc√©narios du GIEC en 2100")
    st.dataframe(growth_df)